### Προτεινόμενο Technology Stack

1.  **Backend:**
    *   **Γλώσσα:** Python
    *   **Framework:** FastAPI
    *   **Web Server:** Uvicorn

2.  **Agent & Επεξεργασία Δεδομένων:**
    *   **LLM:** Google Gemini, μέσω της Python βιβλιοθήκης `google-generativeai`.
    *   **Διαχείριση API Key:** Υβριδικό μοντέλο.
        *   Η εφαρμογή θα περιέχει ένα hardcoded, default API key για άμεση λειτουργία.
        *   Το UI θα ζητά από τον χρήστη κατά την έναρξη να εισάγει το δικό του κλειδί.
        *   Η επιλογή του χρήστη θα αποθηκεύεται τοπικά (π.χ. σε ένα αρχείο ρυθμίσεων στο user profile) για να μην χρειάζεται να το εισάγει κάθε φορά.
        *   **Μελλοντική Επέκταση (Adapter Pattern):** Για την υποστήριξη πολλαπλών παρόχων (OpenAI, Anthropic, κ.λπ.), το UI θα αποκτήσει dropdown επιλογής παρόχου. Το backend θα υλοποιηθεί με "Adapters", όπου θα υπάρχει ένα ξεχωριστό module για κάθε API (π.χ., `gemini_adapter.py`, `openai_adapter.py`), κάνοντας την επέκταση καθαρή και διαχειρίσιμη.
    *   **Ανάγνωση Αρχείων:**
        *   **PDF:** `PyMuPDF` ή `pypdf`.
        *   **Word (.docx):** `python-docx`.
        *   **Excel (.xlsx):** `openpyxl`.
        *   **Βίντεο/Εικόνες:** Ανάλυση μέσω του Gemini API.
        *   **Σχέδια (.dwg):** Αρχική προσέγγιση μέσω εξαγωγής σε PDF/εικόνα από τον χρήστη.

3.  **Frontend:**
    *   **Τεχνολογίες:** HTML, CSS, και Vanilla JavaScript. Το αρχείο `index.html` θα σερβίρεται απευθείας από το FastAPI.

---

### Προτεινόμενο Τεχνολογικό Workflow (Ροή Εργασίας)

1.  **Βήμα 1: Στήσιμο Υποδομής.**
    *   Δημιουργία Python virtual environment (`.venv`), εγκατάσταση βασικών πακέτων (`fastapi`, `uvicorn`, `google-generativeai`, `python-dotenv`), και δημιουργία minimal `main.py`.

2.  **Βήμα 2: Ανάπτυξη του Backend API.**
    *   Δημιουργία του API endpoint (π.χ. `POST /create-presentation`) που δέχεται τη διαδρομή του φακέλου.

3.  **Βήμα 3: Υλοποίηση της Ανάγνωσης Αρχείων.**
    *   Ενσωμάτωση των βιβλιοθηκών για την εξαγωγή περιεχομένου από τα αρχεία κειμένου (PDF, Word, Excel).

4.  **Βήμα 4: Υλοποίηση του Core Agent Logic.**
    *   Σύνδεση με τον Gemini. Δημιουργία της λογικής που:
        *   α) Στέλνει το περιεχόμενο των αρχείων για να παραχθεί το `summary.md`.
        *   β) Στέλνει το `summary.md` για να παραχθεί η ιστοσελίδα (`index.html`, `style.css`).

5.  **Βήμα 5: Ανάπτυξη του Frontend.**
    *   Δημιουργία του `index.html` με τη φόρμα εισαγωγής και τον JavaScript κώδικα για την κλήση του backend API.

6.  **Βήμα 6: Ολοκλήρωση και Δοκιμές.**
    *   Σύνδεση όλων των κομματιών και πλήρης δοκιμή της ροής. Βελτιστοποίηση των prompts και υλοποίηση error handling.

---

### 4. Μοντέλα Λειτουργίας & Deployment

Προτείνονται δύο κύρια μοντέλα λειτουργίας:

**Α. Τοπική/Standalone Εφαρμογή (Κύρια Μορφή):**
*   **Αρχιτεκτονική:** Η εφαρμογή (Python/FastAPI backend & frontend) πακετάρεται ως ένα αυτόνομο εκτελέσιμο αρχείο (`.exe`) με χρήση **PyInstaller**.
*   **Εκτέλεση:** Ο χρήστης κατεβάζει και εκτελεί την εφαρμογή. Δεν απαιτείται καμία εγκατάσταση.
*   **Πρόσβαση:** Ο χρήστης ανοίγει τον browser στη διεύθυνση `http://localhost:8000`.
*   **Πλεονεκτήματα:**
    *   Μέγιστη ασφάλεια (τα αρχεία δεν φεύγουν από τον υπολογιστή).
    *   Ευκολία στη χρήση προσωπικού API key.
    *   Δεν απαιτείται κεντρική υποδομή server.

**Β. Κεντρική Φιλοξενία (Εναλλακτική/Εταιρική Επιλογή):**
*   **Αρχιτεκτονική:** Το backend (Python/FastAPI) φιλοξενείται σε έναν κεντρικό server.
*   **Πρόσβαση:** Οι χρήστες μπαίνουν στην εφαρμογή μέσω μιας κοινής διεύθυνσης URL.
*   **Διαχείριση API Key:** Σε αυτό το μοντέλο, χρησιμοποιείται αποκλειστικά το κεντρικό, προ-ενσωματωμένο API key.
*   **Πλεονεκτήματα:**
    *   Κεντρική διαχείριση και συντήρηση.
    *   Μηδενική προσπάθεια από τον τελικό χρήστη.