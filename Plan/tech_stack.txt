### Προτεινόμενο Technology Stack

1.  **Backend:**
    *   **Γλώσσα:** Python
    *   **Framework:** FastAPI
    *   **Web Server:** Uvicorn

2.  **Agent & Επεξεργασία Δεδομένων:**
    *   **LLM:** Google Gemini, μέσω της Python βιβλιοθήκης `google-generativeai`.
    *   **Διαχείριση API Key:** Υβριδικό μοντέλο.
        *   Η εφαρμογή θα περιέχει ένα hardcoded, default API key για άμεση λειτουργία.
        *   Το UI θα ζητά από τον χρήστη κατά την έναρξη να εισάγει το δικό του κλειδί.
        *   Η επιλογή του χρήστη θα αποθηκεύεται τοπικά (π.χ. σε ένα αρχείο ρυθμίσεων στο user profile) για να μην χρειάζεται να το εισάγει κάθε φορά.
        *   **Μελλοντική Επέκταση (Adapter Pattern):** Για την υποστήριξη πολλαπλών παρόχων (OpenAI, Anthropic, κ.λπ.), το UI θα αποκτήσει dropdown επιλογής παρόχου. Το backend θα υλοποιηθεί με "Adapters", όπου θα υπάρχει ένα ξεχωριστό module για κάθε API (π.χ., `gemini_adapter.py`, `openai_adapter.py`), κάνοντας την επέκταση καθαρή και διαχειρίσιμη.
    *   **Ανάγνωση Αρχείων:**
        *   **PDF:** `PyMuPDF` ή `pypdf`.
        *   **Word (.docx):** `python-docx`.
        *   **Excel (.xlsx):** `openpyxl`.
        *   **CSV (.csv):** Ενσωματωμένη βιβλιοθήκη `csv` της Python.
        *   **PowerPoint (.pptx):** `python-pptx`.
        *   **Εικόνες:** Ανάλυση μέσω του Gemini API.
        *   **Σχέδια (.dwg):** Μετατροπή σε αρχείο εικόνας `.png` μέσω της βιβλιοθήκης `ezdxf` με backend `matplotlib` και στη συνέχεια ανάλυση της εικόνας μέσω του Gemini API.

3.  **Frontend:**
    *   **Τεχνολογίες:** HTML, CSS, και Vanilla JavaScript. Το αρχείο `index.html` θα σερβίρεται απευθείας από το FastAPI.

---

### Προτεινόμενο Τεχνολογικό Workflow (Ροή Εργασίας)

Η ανάπτυξη θα χωριστεί σε 3 διακριτές φάσεις για καλύτερη εστίαση και διαχείριση:

1.  **Phase 1: Files Phase (Άμεση Προτεραιότητα)**
    *   **Στόχος:** Διασφάλιση ότι η εφαρμογή μπορεί να επεξεργαστεί αξιόπιστα όλους τους τύπους αρχείων που ορίζονται στο PRD.
    *   **Ενέργειες:**
        *   Υλοποίηση των ενοτήτων (modules) σε Python για την ανάγνωση και εξαγωγή περιεχομένου από:
            *   PDF (`PyMuPDF`/`pypdf`)
            *   Word (`python-docx`)
            *   Excel (`openpyxl`)
            *   PowerPoint (`python-pptx`)
        *   Ενσωμάτωση της λογικής για την αποστολή εικόνων στο Gemini API για ανάλυση.
        *   Δημιουργία του βασικού backend API endpoint (`POST /create-presentation`) που δέχεται τον φάκελο και ενορχηστρώνει την ανάγνωση των αρχείων.
        *   Δημιουργία ενός απλού frontend για την επιλογή φακέλου και την έναρξη της διαδικασίας.

2.  **Phase 2: Prompt & Agent Logic Phase**
    *   **Στόχος:** Βελτιστοποίηση της "ευφυΐας" του agent, εστιάζοντας στην ποιότητα των αποτελεσμάτων που παράγει.
    *   **Ενέργειες:**
        *   Διαμόρφωση και δοκιμή των prompts που στέλνονται στον LLM για τη δημιουργία του `summary.md`.
        *   Βελτιστοποίηση των prompts για την παραγωγή του τελικού HTML, CSS, και JS κώδικα.
        *   Υλοποίηση της λογικής για τη δυναμική δημιουργία ενοτήτων στην ιστοσελίδα, ανάλογα με το περιεχόμενο του `summary.md`.
        *   Ενσωμάτωση του error handling (π.χ. τι γίνεται αν ένας τύπος αρχείου δεν αναλυθεί σωστά).

3.  **Phase 3: UI/UX Refinement Phase**
    *   **Στόχος:** Αισθητική και λειτουργική αναβάθμιση της εμπειρίας χρήστη.
    *   **Ενέργειες:**
        *   Βελτίωση του UI της αρχικής εφαρμογής (φόρμα επιλογής φακέλου, διαχείριση API key).
        *   Βελτίωση του styling (CSS) των παραγόμενων ιστοσελίδων για να είναι πιο μοντέρνες και ελκυστικές.
        *   Διασφάλιση ότι οι παραγόμενες ιστοσελίδες είναι πλήρως responsive.
        *   Προσθήκη feedback προς τον χρήστη κατά τη διάρκεια της επεξεργασίας (π.χ. progress bars, μηνύματα κατάστασης).

*Σημείωση: Οι φάσεις 2 και 3 έχουν αλληλεπικάλυψη, καθώς η ποιότητα του prompt επηρεάζει άμεσα την τελική εμφάνιση. Ωστόσο, ο διαχωρισμός βοηθά να εστιάσουμε πρώτα στη λειτουργική επάρκεια (Phase 2) και μετά στην αισθητική τελειοποίηση (Phase 3).*

---

### 4. Μοντέλα Λειτουργίας & Deployment

Προτείνονται δύο κύρια μοντέλα λειτουργίας:

**Α. Τοπική/Standalone Εφαρμογή (Κύρια Μορφή):**
*   **Αρχιτεκτονική:** Η εφαρμογή (Python/FastAPI backend & frontend) πακετάρεται ως ένα αυτόνομο εκτελέσιμο αρχείο (`.exe`) με χρήση **PyInstaller**.
*   **Εκτέλεση:** Ο χρήστης κατεβάζει και εκτελεί την εφαρμογή. Δεν απαιτείται καμία εγκατάσταση.
*   **Πρόσβαση:** Ο χρήστης ανοίγει τον browser στη διεύθυνση `http://localhost:8000`.
*   **Πλεονεκτήματα:**
    *   Μέγιστη ασφάλεια (τα αρχεία δεν φεύγουν από τον υπολογιστή).
    *   Ευκολία στη χρήση προσωπικού API key.
    *   Δεν απαιτείται κεντρική υποδομή server.

**Β. Κεντρική Φιλοξενία (Εναλλακτική/Εταιρική Επιλογή):**
*   **Αρχιτεκτονική:** Το backend (Python/FastAPI) φιλοξενείται σε έναν κεντρικό server.
*   **Πρόσβαση:** Οι χρήστες μπαίνουν στην εφαρμογή μέσω μιας κοινής διεύθυνσης URL.
*   **Διαχείριση API Key:** Σε αυτό το μοντέλο, χρησιμοποιείται αποκλειστικά το κεντρικό, προ-ενσωματωμένο API key.
*   **Πλεονεκτήματα:**
    *   Κεντρική διαχείριση και συντήρηση.
    *   Μηδενική προσπάθεια από τον τελικό χρήστη.