### Εντολές για LLM Agent: Αναδιοργάνωση (Refactoring) του Project Structure

**Στόχος:** Να γίνει refactor στον κώδικα του project ώστε η λογική επεξεργασίας αρχείων να μεταφερθεί από το `main.py` σε μια νέα, οργανωμένη δομή μέσα στον φάκελο `src`, ακολουθώντας το "Adapter Pattern".

**Βήμα 1: Δημιουργία Δομής Φακέλων**
1.  Επιβεβαίωσε ότι ο φάκελος `src/` υπάρχει.
2.  Μέσα στον `src/`, δημιούργησε έναν νέο υποφάκελο με όνομα `processors`.

**Βήμα 2: Δημιουργία του Text Processor**
1.  Δημιούργησε ένα νέο αρχείο: `src/processors/text_processor.py`.
2.  Μετακίνησε τις σχετικές βιβλιοθήκες (`import fitz  # PyMuPDF`, `import docx`) από την κορυφή του `main.py` στο νέο αρχείο `src/processors/text_processor.py`.
3.  Βρες τις συναρτήσεις στο `main.py` που είναι υπεύθυνες για την ανάγνωση των `.pdf`, `.docx`, και `.txt` αρχείων. Κόψε αυτές τις συναρτήσεις από το `main.py` και επικόλλησέ τες μέσα στο `src/processors/text_processor.py`.
4.  Δημιούργησε μια κύρια συνάρτηση στο `text_processor.py` με όνομα `process(file_path: str) -> str`. Αυτή η συνάρτηση θα δέχεται τη διαδρομή ενός αρχείου, θα ελέγχει την κατάληξή του (pdf, docx, txt) και θα καλεί την κατάλληλη εσωτερική συνάρτηση για να εξάγει το περιεχόμενο. Θα επιστρέφει το περιεχόμενο ως string.

**Βήμα 3: Δημιουργία του Spreadsheet Processor**
1.  Δημιούργησε ένα νέο αρχείο: `src/processors/spreadsheet_processor.py`.
2.  Μετακίνησε το `import openpyxl` από το `main.py` στο νέο αρχείο.
3.  Κόψε τη συνάρτηση που διαβάζει τα αρχεία `.xlsx` από το `main.py` και επικόλλησέ την στο `src/processors/spreadsheet_processor.py`.
4.  Δημιούργησε και εδώ μια κύρια συνάρτηση `process(file_path: str) -> str` που θα κάνει την επεξεργασία και θα επιστρέφει το περιεχόμενο.

**Βήμα 4: Αναδιοργάνωση του `main.py`**
1.  Αφαίρεσε από το `main.py` τις συναρτήσεις και τα imports που μετακίνησες στα προηγούμενα βήματα.
2.  Στην κορυφή του `main.py`, πρόσθεσε τα νέα imports από τα modules που δημιούργησες:
    ```python
    from src.processors import text_processor, spreadsheet_processor
    ```
3.  Βρες το σημείο μέσα στην endpoint `create_presentation` όπου γίνεται η επεξεργασία των αρχείων (πιθανότατα ένας βρόχος `for`).
4.  Τροποποίησε τη λογική μέσα στον βρόχο:
    - Αντί να καλεί τις τοπικές συναρτήσεις, τώρα θα ελέγχει την κατάληξη του αρχείου και θα καλεί την αντίστοιχη συνάρτηση `process` από το κατάλληλο module.
    - Παράδειγμα:
      ```python
      if extension in ['.pdf', '.docx', '.txt']:
          content = text_processor.process(full_path)
      elif extension == '.xlsx':
          content = spreadsheet_processor.process(full_path)
      ```
5.  Η υπόλοιπη λογική (συγκέντρωση του περιεχομένου και κλήση στο Gemini) παραμένει στο `main.py` προς το παρόν.

**Βήμα 5: Επιβεβαίωση**
1.  Αφού ολοκληρωθούν οι αλλαγές, εκτέλεσε την εφαρμογή για να επιβεβαιώσεις ότι η λειτουργικότητα παραμένει ακριβώς η ίδια. Δοκίμασε δίνοντας έναν φάκελο που περιέχει αρχεία `.txt`, `.pdf`, και `.xlsx` για να σιγουρευτείς ότι όλοι οι επεξεργαστές λειτουργούν σωστά.