Project Requirement Document (PRD) - Epirus Showcase Agent

Version: 1.0
Date: 29/05/2024

---

### 1. Εισαγωγή & Όραμα

**Όραμα Project:** Να δημιουργηθεί μια δυναμική web πλατφόρμα που αυτοματοποιεί πλήρως τη διαδικασία παρουσίασης δημόσιων έργων της Περιφέρειας Ηπείρου. Ο πυρήνας της πλατφόρμας θα είναι ένας ευφυής LLM agent, ο οποίος θα αναλαμβάνει την ανάλυση όλων των αρχείων ενός έργου και την αυτόματη δημιουργία μιας σύγχρονης, στατικής ιστοσελίδας για την παρουσίασή του.

**Πρόβλημα προς Επίλυση:** Η πληροφορία για τα δημόσια έργα είναι συχνά διάσπαρτη σε πολλαπλά, πολύπλοκα και τεχνικά έγγραφα (PDF, Word, Excel, σχέδια), καθιστώντας δύσκολη την κατανόηση από το ευρύ κοινό. Η δημιουργία μιας ιστοσελίδας για κάθε έργο απαιτεί χρόνο και εξειδικευμένες γνώσεις.

**Προτεινόμενη Λύση:** Ένα web application όπου ο χρήστης απλώς παρέχει έναν φάκελο με τα αρχεία ενός έργου. **Για λόγους ασφαλείας και ακεραιότητας των δεδομένων, ο LLM agent δεν θα τροποποιήσει, αλλάξει ή διαγράψει κανένα αρχείο μέσα στον αρχικό φάκελο που παρέχει ο χρήστης.** **Είναι κρίσιμο να τονιστεί ότι ο όρος "αρχεία" καλύπτει κάθε μορφή πληροφορίας, όχι μόνο έγγραφα κειμένου, αλλά και εικόνες, βίντεο, λογιστικά φύλλα και τεχνικά σχέδια.** Ένας LLM agent αναλαμβάνει να "διαβάσει" και να συνθέσει τις πληροφορίες από όλα αυτά τα αρχεία, και στη συνέχεια να **σχεδιάσει και να κατασκευάσει** αυτόματα μια ελκυστική, one-page ιστοσελίδα παρουσίασης, **της οποίας η δομή προσαρμόζεται δυναμικά στο περιεχόμενο που εντοπίζεται.**

---

### 2. Στόχοι

*   **Αυτοματοποίηση:** Πλήρης αυτοματοποίηση της διαδικασίας από την ανάλυση δεδομένων έως τη δημιουργία της τελικής ιστοσελίδας.
*   **Προσβασιμότητα:** Μετατροπή τεχνικών πληροφοριών σε περιεχόμενο που είναι ταυτόχρονα κατανοητό και ελκυστικό για το ευρύ κοινό, αλλά και ακριβές και πληροφοριακό για εξειδικευμένο κοινό με τεχνικές γνώσεις.
*   **Ευελιξία:** Το σύστημα πρέπει να λειτουργεί απρόσκοπτα με οποιοδήποτε φάκελο έργου, ανεξαρτήτως του πλήθους ή του τύπου των αρχείων.
*   **Σύγχρονη Παρουσίαση:** Οι παραγόμενες ιστοσελίδες πρέπει να έχουν μοντέρνο UI/UX.

---

### 3. Λειτουργικές Απαιτήσεις (Functional Requirements)

#### 3.1. Βήμα 1: Επεξεργασία & Αποδελτίωση Περιεχομένου

*   **FR1.1 - Ανέβασμα/Επιλογή Φακέλου:** Ο χρήστης πρέπει να μπορεί να ορίσει την τοποθεσία ενός φακέλου στο σύστημά του που περιέχει όλα τα σχετικά αρχεία του έργου.
*   **FR1.2 - Ανάγνωση Αρχείων:** Ο LLM agent πρέπει να μπορεί να επεξεργαστεί και να εξάγει κείμενο και δεδομένα από πολλαπλούς τύπους αρχείων. Υποστηριζόμενοι τύποι αρχείων κατ' ελάχιστον:
    *   Κειμένου: `.pdf` (με OCR για σαρωμένα έγγραφα), `.docx`, `.txt`
    *   Λογιστικών φύλλων: `.xlsx`
    *   Εικόνων: `.jpg`, `.png` (για εξαγωγή περιγραφών ή ανάλυση περιεχομένου)
    *   Βίντεο: `.mp4`, `.mov`, `.avi`. Ο agent πρέπει να μπορεί να αναλύει τα καρέ (frames) του βίντεο για να εξάγει οπτικές πληροφορίες, σκηνές, ή και να απομαγνητοφωνεί την ομιλία αν υπάρχει.
    *   Αρχιτεκτονικών Σχεδίων: `.dwg` και άλλοι τύποι CAD αρχείων. Ο agent πρέπει να μπορεί να "κατανοεί" το περιεχόμενο των σχεδίων (π.χ. κατόψεις, όψεις) και να εξάγει σχετικές πληροφορίες.
*   **FR1.3 - Κατανόηση Περιεχομένου:** Ο agent πρέπει να αναγνωρίζει και να κατηγοριοποιεί τις πληροφορίες που συλλέγει, όπως:
    *   Τίτλος & Κωδικός Έργου
    *   Προϋπολογισμός
    *   Τεχνική Περιγραφή
    *   Χρονοδιάγραμμα
    *   Ανάδοχος
    *   Γεωγραφική Τοποθεσία
    *   Στόχοι & Οφέλη του έργου
*   **FR1.4 - Δημιουργία Markdown Αρχείου:** Ο agent θα συνθέσει όλες τις παραπάνω πληροφορίες σε ένα ενιαίο, καλά δομημένο αρχείο Markdown (`summary.md`). Αυτό το αρχείο θα λειτουργεί ως η "ενιαία πηγή αλήθειας" (single source of truth) για το περιεχόμενο της ιστοσελίδας.
*   **FR1.5 - Αναγνώριση Φάσεων Έργου:** Ο agent πρέπει να προσπαθεί να αναγνωρίσει και να ταξινομήσει τις πληροφορίες που βρίσκει σύμφωνα με τις τυπικές φάσεις ενός δημόσιου έργου. Αυτό θα τον βοηθήσει να δομήσει καλύτερα την τελική παρουσίαση. Οι βασικές φάσεις-οδηγοί είναι:
    *   **Σχεδιασμός & Μελέτη:** Έγγραφα που αφορούν μελέτες σκοπιμότητας, τεχνικές προδιαγραφές, περιβαλλοντικές μελέτες.
    *   **Δημοπράτηση & Ανάθεση:** Έγγραφα σχετικά με τη διαδικασία του διαγωνισμού και την επιλογή αναδόχου.
    *   **Εκτέλεση & Κατασκευή:** Πληροφορίες για την πρόοδο των εργασιών, χρονοδιαγράμματα υλοποίησης, φωτογραφίες από το εργοτάξιο.
    *   **Ολοκλήρωση & Παραλαβή:** Έγγραφα που πιστοποιούν την ολοκλήρωση και την παράδοση του έργου.
*   **FR1.6 - Συσχέτιση με Πηγή (Source-Mapping):** Κατά την εξαγωγή κάθε πληροφορίας, ο agent πρέπει να καταγράφει και το αρχείο-πηγή (και ιδανικά τη σελίδα ή τη γραμμή) από όπου προήλθε. Στο `summary.md`, κάθε κομμάτι πληροφορίας πρέπει να συνοδεύεται από έναν σύνδεσμο που να παραπέμπει στο ακριβές σημείο του αρχικού αρχείου. *Αυτή η λειτουργία είναι θεμελιώδης για τη μελλοντική ιχνηλασιμότητα, ακόμα κι αν δεν εμφανίζεται στην αρχική έκδοση της ιστοσελίδας.*

#### 3.2. Βήμα 2: Δημιουργία Ιστοσελίδας

*   **FR2.1 - Δυναμικός Σχεδιασμός Δομής (Dynamic Structure Design):** Βάσει του περιεχομένου στο `summary.md`, ο LLM agent θα αναλύσει τον τύπο και την ποσότητα των διαθέσιμων πληροφοριών για να σχεδιάσει την βέλτιστη δομή της ιστοσελίδας. Αυτό περιλαμβάνει:
    *   **Προσαρμοστική Δημιουργία Ενοτήτων:** Ο agent θα αποφασίζει ποιες ενότητες είναι απαραίτητες. Για παράδειγμα:
        *   Αν εντοπίσει πολλές εικόνες (`.jpg`, `.png`), θα δημιουργήσει μια ενότητα "Φωτογραφικό Υλικό" σε μορφή gallery.
        *   Αν εντοπίσει αρχεία `.dwg` ή κατόψεις, θα δημιουργήσει μια ενότητα "Αρχιτεκτονικά Σχέδια".
        *   Αν εντοπίσει ένα `.xlsx` με χρονοδιάγραμμα, θα το παρουσιάσει ως timeline.
*   **FR2.2 - Παραγωγή Κώδικα Ιστοσελίδας:** Με βάση τον δυναμικό σχεδιασμό, ο agent θα γράψει τον απαραίτητο κώδικα (HTML, CSS, και πιθανώς JavaScript) για τη δημιουργία της στατικής, one-page ιστοσελίδας.
*   **FR2.3 - Δομή Ιστοσελίδας:** Η παραγόμενη ιστοσελίδα θα πρέπει να περιλαμβάνει:
    *   **Header:** Με τον τίτλο του έργου.
    *   **Μενού Πλοήγησης (Navigation Menu):** Ένα sticky/fixed μενού στο πάνω μέρος της σελίδας με anchor links που οδηγούν στις αντίστοιχες ενότητες.
    *   **Ενότητες (Sections):** Διακριτές ενότητες που θα παρουσιάζουν τις πληροφορίες, όπως:
        *   Σύνοψη (Overview)
        *   Ταυτότητα Έργου (Προϋπολογισμός, Χρονοδιάγραμμα, Ανάδοχος)
        *   Τεχνικές Λεπτομέρειες
        *   Φωτογραφικό Υλικό / Σχέδια
        *   Τοποθεσία (ίσως με ενσωματωμένο χάρτη)
        *   Στοιχεία Επικοινωνίας
    *   **Footer:** Με πληροφορίες για την Περιφέρεια Ηπείρου και την ημερομηνία δημιουργίας της σελίδας.
*   **FR2.4 - Αποθήκευση Ιστοσελίδας:** Το τελικό αποτέλεσμα (π.χ., `index.html`, `style.css`) θα αποθηκεύεται σε έναν καθορισμένο φάκελο εξόδου.
*   **FR2.5 - Παράλειψη Συνδέσμων Πηγής (v1.0):** Στην αρχική έκδοση της ιστοσελίδας, ο agent θα πρέπει να **αγνοεί** τους συνδέσμους πηγής που υπάρχουν στο `summary.md` και να **μην τους εμφανίζει** στο τελικό HTML. Η ιστοσελίδα πρέπει να είναι καθαρή από συνδέσμους προς τα αρχικά αρχεία.

---

### 4. Μη-Λειτουργικές Απαιτήσεις (Non-Functional Requirements)

*   **NFR1 - Τεχνολογίες & Ευελιξία API Key:** Ο πυρήνας του συστήματος θα βασίζεται σε έναν LLM (προτείνεται το Google Gemini), αλλά η αρχιτεκτονική πρέπει να είναι ευέλικτη (agent-agnostic). Για τον σκοπό αυτό, η διαχείριση του API key θα είναι υβριδική:
    *   **Προεπιλεγμένη Λειτουργία:** Η εφαρμογή θα παρέχεται με ένα ενσωματωμένο, προεπιλεγμένο API key για να λειτουργεί άμεσα, χωρίς ρυθμίσεις.
    *   **Προσωποποιημένη Λειτουργία:** Η εφαρμογή θα προτρέπει και θα καθοδηγεί τον χρήστη να εισάγει το δικό του, προσωπικό API key, προσφέροντας έτσι έλεγχο στο κόστος και την απόδοση.
Το backend της εφαρμογής θα υλοποιηθεί με Python (Flask/FastAPI) ή Node.js (Express).
*   **NFR2 - Απόδοση:** Η διαδικασία ανάλυσης και δημιουργίας της ιστοσελίδας πρέπει να ολοκληρώνεται σε λογικό χρονικό διάστημα.
*   **NFR3 - Ασφάλεια & Απόρρητο:** Τα αρχεία του έργου θα επεξεργάζονται σε ένα ασφαλές, απομονωμένο περιβάλλον. Για την αρχική έκδοση, δεν απαιτείται η αυτόματη διαγραφή των πρωτογενών αρχείων μετά την επεξεργασία.
*   **NFR4 - UI/UX:** Το UI της κεντρικής εφαρμογής (όπου ο χρήστης δίνει τον φάκελο) πρέπει να είναι απλό και κατανοητό. Το UI των παραγόμενων ιστοσελίδων πρέπει να είναι μοντέρνο, καθαρό και responsive (να προσαρμόζεται σε οθόνες υπολογιστών, tablet και κινητών).
*   **NFR5 - Ημερολόγιο Ανάπτυξης Agent (Agent Devlog):** Για να διασφαλιστεί η ανθεκτικότητα της διαδικασίας ανάπτυξης και η δυνατότητα συνέχισης της εργασίας μετά από διακοπές (π.χ. όρια API, σφάλματα), ο ίδιος ο agent που αναπτύσσει την εφαρμογή θα πρέπει να τηρεί ένα "ημερολόγιο".
    *   **Αρχείο Στόχος:** `Plan/devlog.md`.
    *   **Λειτουργία:** Μετά την ολοκλήρωση κάθε σημαντικού βήματος ανάπτυξης (π.χ. "Δημιούργησα το βασικό αρχείο main.py", "Ολοκλήρωσα την υλοποίηση του API endpoint /create-presentation"), ο agent θα πρέπει να προσθέτει μια νέα εγγραφή στο `devlog.md` περιγράφοντας την ενέργεια που μόλις ολοκλήρωσε.
    *   **Σκοπός:** Το αρχείο αυτό λειτουργεί ως "μνήμη" για τον agent. Πριν ξεκινήσει οποιαδήποτε εργασία, θα συμβουλεύεται το `devlog.md` για να γνωρίζει ποιο ήταν το τελευταίο επιτυχημένο βήμα και ποιο είναι το επόμενο, επιτρέποντάς του να συνεχίζει από εκεί που σταμάτησε.

---

### 5. Ροή Χρήστη (User Flow)

1.  **Εκκίνηση:** Ο χρήστης εκκινεί την εφαρμογή (είτε εκτελώντας το τοπικό `.exe`, είτε ανοίγοντας την κεντρική διεύθυνση URL).
2.  **Οθόνη API Key:** Εμφανίζεται μια αρχική οθόνη.
    *   Η οθόνη διαθέτει ένα πεδίο για την εισαγωγή προσωπικού API key.
    *   Παρέχονται σαφείς οδηγίες (π.χ., "Πώς να αποκτήσετε το δικό σας Gemini API Key...").
    *   Ο χρήστης έχει δύο επιλογές:
        *   **Επιλογή Α (Προτεινόμενη):** Εισάγει το δικό του κλειδί και πατάει "Αποθήκευση".
        *   **Επιλογή Β:** Πατάει "Συνέχεια με το προεπιλεγμένο κλειδί" για να χρησιμοποιήσει την εφαρμογή άμεσα.
3.  **Κύρια Εφαρμογή:** Ο χρήστης μεταφέρεται στην κύρια οθόνη της εφαρμογής.
4.  **Επιλογή Φακέλου:** Πατάει το κουμπί "Επιλογή Φακέλου Έργου" και επιλέγει τον φάκελο από τον υπολογιστή του.
5.  **Δημιουργία:** Πατάει το κουμπί "Δημιουργία Παρουσίασης".
6.  **Επεξεργασία:** Η εφαρμογή στέλνει το αίτημα στον LLM agent, χρησιμοποιώντας το κατάλληλο API key (του χρήστη ή το προεπιλεγμένο).
7.  **Αποτέλεσμα:** Μετά την ολοκλήρωση, η εφαρμογή παρουσιάζει έναν σύνδεσμο για την τελική ιστοσελίδα ή/και επιλογή για λήψη των αρχείων της.

---

### 7. Παραδοχές & Εξαρτήσεις

*   **Παραδοχή:** Τα αρχεία μέσα στον φάκελο περιέχουν επαρκείς και σχετικές πληροφορίες για το έργο.
*   **Παραδοχή (Γλώσσα):** Η κύρια γλώσσα των εγγράφων και των πολυμεσικών αρχείων είναι η ελληνική. Ωστόσο, ο agent πρέπει να είναι σε θέση να διαχειρίζεται και περιεχόμενο σε άλλες γλώσσες, κυρίως στα αγγλικά.
*   **Εξάρτηση:** Απαιτείται ενεργή σύνδεση στο διαδίκτυο για την επικοινωνία με το API του LLM.
*   **Εξάρτηση:** Απαιτείται συνδρομή σε μια υπηρεσία LLM που επιτρέπει την επεξεργασία αρχείων και την παραγωγή κώδικα.

---

### 8. Μετρήσεις Επιτυχίας (Success Metrics)

*   **Μέτρηση Απόδοσης:** Ο συνολικός χρόνος από την επιλογή του φακέλου έως την παράδοση της τελικής ιστοσελίδας να είναι κατά μέσο όρο κάτω από 5 λεπτά.
*   **Μέτρηση Ακρίβειας:** Ποσοστό >95% επιτυχούς εξαγωγής των βασικών πληροφοριών (Τίτλος, Προϋπολογισμός, Χρονοδιάγραμμα) από τα έγγραφα.

---

### 9. Διαχείριση Σφαλμάτων & Οριακές Περιπτώσεις (Error Handling & Edge Cases)

Το σύστημα πρέπει να διαχειρίζεται με σαφήνεια τις ακόλουθες περιπτώσεις:

*   **Άδειος ή μη σχετικός φάκελος:** Εάν ο φάκελος δεν περιέχει υποστηριζόμενους τύπους αρχείων ή οι πληροφορίες είναι ανεπαρκείς, το σύστημα πρέπει να ενημερώνει τον χρήστη με ένα φιλικό μήνυμα (π.χ., "Δεν βρέθηκαν επαρκείς πληροφορίες για τη δημιουργία της σελίδας. Παρακαλώ ελέγξτε τα αρχεία σας.").
*   **Αποτυχία εξαγωγής κρίσιμων δεδομένων:** Εάν ο agent δεν μπορεί να εντοπίσει βασικά στοιχεία (π.χ. τον τίτλο ή τον προϋπολογισμό του έργου), η διαδικασία θα συνεχίζεται με όσες πληροφορίες έχουν εντοπιστεί. Η τελική ιστοσελίδα θα δημιουργηθεί με τα διαθέσιμα δεδομένα, και ενδέχεται να λείπουν κάποιες ενότητες.
*   **Αποτυχία επικοινωνίας με το LLM API:** Σε περίπτωση προβλήματος δικτύου ή αποτυχίας του API, το σύστημα πρέπει να εμφανίζει μήνυμα σφάλματος και να προτείνει στον χρήστη να προσπαθήσει ξανά αργότερα.
*   **Παραγωγή μη έγκυρου κώδικα:** Θα πρέπει να υπάρχει ένας βασικός μηχανισμός ελέγχου (validation) του παραγόμενου HTML/CSS για την αποφυγή "σπασμένων" σελίδων.

---

### 10. Μελλοντικές Βελτιώσεις (Out of Scope for v1.0)

*   **Υποστήριξη πολλαπλών LLM παρόχων:** Προσθήκη ενός dropdown μενού στο UI που θα επιτρέπει στον χρήστη να επιλέγει τον πάροχο του API key του (π.χ., "Google Gemini", "OpenAI GPT-4"). Αυτό θα ενεργοποιεί την αντίστοιχη λογική στο backend για την επικοινωνία με τον επιλεγμένο πάροχο.
*   Προσθήκη μετρήσεων ποιότητας (π.χ. Google Lighthouse) και υιοθέτησης.
*   Δημιουργία πολυσέλιδων ιστοσελίδων για πιο σύνθετα έργα.
*   Δυνατότητα επεξεργασίας της παραγόμενης ιστοσελίδας από τον χρήστη μέσω ενός απλού editor.
*   Δημιουργία μιας κεντρικής πύλης (portal) που θα φιλοξενεί και θα παρουσιάζει όλες τις ιστοσελίδες των έργων που έχουν δημιουργηθεί.
*   Ενεργοποίηση της επιλεκτικής εμφάνισης συνδέσμων προς τα αρχεία-πηγές για κρίσιμες πληροφορίες.